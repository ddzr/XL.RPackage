% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ml_mean_target_encoder.R
\name{ml_mean_target_encoder}
\alias{ml_mean_target_encoder}
\title{Mean Target encoding is the process of replacing a categorical value with the mean of the target variable.}
\usage{
ml_mean_target_encoder(
  mean_target_colnames,
  target_colname,
  training_data,
  test_data = NULL,
  fold = NULL,
  min_samples_leaf = 0,
  smoothing = 1,
  impute_missing = T
)
}
\arguments{
\item{mean_target_colnames}{list of column names that needs mean target encoding}

\item{target_colname}{target column name, should be numeric column}

\item{training_data}{dataset we used to build mean targeting table}

\item{test_data}{dataset we used to apply mean target encoding}

\item{fold}{list of fold index for training dataset, suggest to use caret::createFolds}

\item{min_samples_leaf}{minimum quantity per column value we consider needs to be calculate mean.}

\item{smoothing}{used to control rate of transition between the particular column levelâ€™s posterior probability and the grand target mean, default is set to 1 to ignore this effect}

\item{impute_missing}{determine if we want to impute missing when new dataste levels could not be found in mapping table, defualt is to impute}
}
\value{
a list that contains datasets that haven been applied mean target encoding and also a mapping table named calculate_columns_mean_table to use for ml_mean_target_apply function ta apply mean targeting encoding on new dataset
}
\description{
This function convert input columns to mean target encoding columns, inspired from https://www.kaggle.com/ogrellier/python-target-encoding-for-categorical-features
}
\seealso{
\link{ml+mean_target_apply}
}
